################################################################################
#
# Protocol file for Pfeiffer TPG-300 gauge controller
#
################################################################################

OutTerminator = LF;
InTerminator  = CR LF;

# Larger LockTimeout due to increased ReplyTimeout in set_save_params protocol.
LockTimeout = 10000;

# Force disconnect on timeouts to achieve consistent behavior with respect to
# readback updates when the device is power cycled and is connected through a MOXA.
reconnect {
    out ETX;
    disconnect;
    connect 1000;
}

@replytimeout {
    reconnect;
}

@readtimeout {
    reconnect;
}

# General mismatch handler, basically a no-op
@mismatch {
    in  NAK;
}


reset_interface {
    out ETX;
}

get_error_code {
    out "ERR";
    in  ACK;
    out ENQ;
    in  "%(E)d";
}


# Simple ACK/ENQ pair for protocols without further error processing
enquery {
    in  ACK;
    out ENQ;
}

# An ACK/ENQ pair that clears the field 'E' of the connected PV
#  for protocols that do record the error code
enquery_with_error_reset {
    in  ACK "%(E)?d";
    out ENQ;

# Unfortunately exception handlers are _NOT_ inherited by the calling protocol,
#  so it needs to be copy-pasted !
    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


get_puc {
    out "PUC";
    enquery;
    in  "%d";
}


set_puc {
    out "PUC,%d";
    enquery;
    in  "%*d";
}


get_units {
    out "UNI";
    enquery;
    in  "%d";
}


set_units {
    out "UNI,%d";
    enquery;
    in  "%*d";
}


get_save_params {
    out "SAV";
    enquery;
    in  "%d";
}


# Saving user defined parameters takes significantly longer (~3s). 
set_save_params {
    ReplyTimeout = 5000;

    out "SAV,%d";
    enquery;
    in  "%*d";
}


get_baud {
    out "BAU";
    enquery;
    in  "%d";
}


set_baud {
    out "BAU,%d";
    in  ACK;
    disconnect;
}


get_version {
    out "PNR";
    enquery;
    in  "%#s";
}


# A and B
#  Pirani
#             PI 300D
#             PI 300DN
#  Cold cathode
#             PE 300DC9
#  Pirani / Cold cathode combined
#             CP 300C9
#             CP 300C10
#             CP 300T11
#             CP 300T11L
# C
#  RS232C interface (D-Sub-Connector) and Relays
#             IF 300A
#  RS232C interface (cable) and Relays
#             IF 300B
#  RS422 interface and Relays
#             IF 300C
#  Profibus-DP interface and Relays
#             IF 300P
get_slots {
    out "TID";
    enquery_with_error_reset;
    in  "%(AA)[^,],%(BB)[^,],%(CC)[^,]";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


get_pressure {
    out "P\$1";
    enquery_with_error_reset;
    in  "%(A)d,%(B)E";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


get_modes {
    out "SEN";
    enquery;
    in  "%(A)d,%(B)d,%(C)d,%(D)d";
}


set_modes {
    out "SEN,%(A)d,%(B)d,%(C)d,%(D)d";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


set_mode_A1 {
    out "SEN,%(A)d,0,0,0";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


set_mode_A2 {
    out "SEN,0,%(A)d,0,0";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


set_mode_B1 {
    out "SEN,0,0,%(A)d,0";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


set_mode_B2 {
    out "SEN,0,0,0,%(A)d";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


get_filter {
    out "FIL";
    enquery;
    in  "%(A)d,%(B)d,%(C)d,%(D)d";
}


set_filter {
    out "FIL,%(A)d,%(B)d,%(C)d,%(D)d";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


get_function {
    out "SP\$1";
    enquery;
    in  "%(A)E,%(B)E,%(C)d";
}


set_function {
    out "SP\$1,%(A)1.1E,%(B)1.1E,%(C)d";
    enquery_with_error_reset;
    in  "%*E,%*E,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


get_func_stat {
    out "SPS";
    enquery;
    in  "%(A)d,%(B)d,%(C)d,%(D)d,%(E)d,%(F)d";
}
